# .github/workflows/live-analysis.yml
name: Live Analysis with AI

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: 'URL da live para analisar'
        required: true
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      segments: ${{ steps.generate-segments.outputs.segments }}
      duration: ${{ steps.get-duration.outputs.duration }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install yt-dlp and ffmpeg
        run: |
          pip install yt-dlp
          sudo apt update
          sudo apt install -y ffmpeg

      - name: Get video duration
        id: get-duration
        run: |
          # Usar script JavaScript para melhor detecÃ§Ã£o
          npm install
          node get-video-duration.js "${{ github.event.inputs.video_url }}"
          
      - name: Generate segment list
        id: generate-segments
        run: |
          duration=${{ steps.get-duration.outputs.duration }}
          echo "ðŸ“‹ Gerando lista de $duration segmentos..."
          
          segments="["
          for ((i=0; i<duration; i++)); do
            if [ $i -gt 0 ]; then
              segments="$segments,"
            fi
            segments="$segments$i"
          done
          segments="$segments]"
          echo "segments=$segments" >> $GITHUB_OUTPUT
          echo "âœ… Lista de segmentos gerada: $segments"

  analyze:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        segment: ${{ fromJson(needs.setup.outputs.segments) }}
        account_id: [0, 1, 2, 3, 4]
      max-parallel: 5
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install playwright ffmpeg-static
          npx playwright install chromium

      - name: Download video segment
        run: |
          # Usar script JavaScript para download otimizado
          node download-segment.js "${{ github.event.inputs.video_url }}" ${{ matrix.segment }}

      - name: Analyze segment with AI
        run: node analyze-segment.js ${{ matrix.segment }} ${{ matrix.account_id }}
        env:
          SEGMENT_FILE: segment_${{ matrix.segment }}.mp4

      - name: Upload analysis result
        uses: actions/upload-artifact@v4
        with:
          name: analysis-segment-${{ matrix.segment }}
          path: analysis_${{ matrix.segment }}.txt

      - name: Clean up segment file
        run: rm -f segment_${{ matrix.segment }}.*

  compile-timeline:
    runs-on: ubuntu-latest
    needs: [setup, analyze]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all analysis results
        uses: actions/download-artifact@v4
        with:
          pattern: analysis-segment-*
          merge-multiple: true

      - name: Compile timeline
        run: node compile-timeline.js ${{ needs.setup.outputs.duration }}

      - name: Upload final timeline
        uses: actions/upload-artifact@v4
        with:
          name: live-timeline
          path: |
            timeline.txt
            timeline.json
